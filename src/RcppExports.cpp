// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fGm
arma::mat fGm(const arma::mat& dnm, const int& Nm);
RcppExport SEXP _PartialNetwork2_fGm(SEXP dnmSEXP, SEXP NmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dnm(dnmSEXP);
    Rcpp::traits::input_parameter< const int& >::type Nm(NmSEXP);
    rcpp_result_gen = Rcpp::wrap(fGm(dnm, Nm));
    return rcpp_result_gen;
END_RCPP
}
// fcpal0_1
double fcpal0_1(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::vec& Gy, const arma::mat& X, const arma::mat& GX, const int& Kx, const int& Kx1, const int& Kx2, const int& M, const arma::vec& Ncum, const bool FE);
RcppExport SEXP _PartialNetwork2_fcpal0_1(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP GySEXP, SEXP XSEXP, SEXP GXSEXP, SEXP KxSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX(GXSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    rcpp_result_gen = Rcpp::wrap(fcpal0_1(alpha, R, distr, Ilist, y, Gy, X, GX, Kx, Kx1, Kx2, M, Ncum, FE));
    return rcpp_result_gen;
END_RCPP
}
// efcpal0_1
List efcpal0_1(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::vec& Gy, const arma::mat& X, const arma::mat& GX, const int& Kx, const int& Kx1, const int& Kx2, const int& M, const arma::vec& Ncum, const bool FE);
RcppExport SEXP _PartialNetwork2_efcpal0_1(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP GySEXP, SEXP XSEXP, SEXP GXSEXP, SEXP KxSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX(GXSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    rcpp_result_gen = Rcpp::wrap(efcpal0_1(alpha, R, distr, Ilist, y, Gy, X, GX, Kx, Kx1, Kx2, M, Ncum, FE));
    return rcpp_result_gen;
END_RCPP
}
// fcpal0_0
double fcpal0_0(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::vec& Gy, const arma::mat& X, const int& Kx, const int& M, const arma::vec& Ncum, const bool FE);
RcppExport SEXP _PartialNetwork2_fcpal0_0(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP GySEXP, SEXP XSEXP, SEXP KxSEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    rcpp_result_gen = Rcpp::wrap(fcpal0_0(alpha, R, distr, Ilist, y, Gy, X, Kx, M, Ncum, FE));
    return rcpp_result_gen;
END_RCPP
}
// efcpal0_0
List efcpal0_0(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::vec& Gy, const arma::mat& X, const int& Kx, const int& M, const arma::vec& Ncum, const bool FE);
RcppExport SEXP _PartialNetwork2_efcpal0_0(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP GySEXP, SEXP XSEXP, SEXP KxSEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    rcpp_result_gen = Rcpp::wrap(efcpal0_0(alpha, R, distr, Ilist, y, Gy, X, Kx, M, Ncum, FE));
    return rcpp_result_gen;
END_RCPP
}
// fcpal1_1
double fcpal1_1(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X, const arma::mat& X1, const arma::mat& GX1, const arma::mat& X2, const int& Kx, const int& Kx1, const int& Kx2, const int& M, const arma::vec& Ncum, const bool FE, const int& S);
RcppExport SEXP _PartialNetwork2_fcpal1_1(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP XSEXP, SEXP X1SEXP, SEXP GX1SEXP, SEXP X2SEXP, SEXP KxSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX1(GX1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(fcpal1_1(alpha, R, distr, Ilist, y, X, X1, GX1, X2, Kx, Kx1, Kx2, M, Ncum, FE, S));
    return rcpp_result_gen;
END_RCPP
}
// efcpal1_1
List efcpal1_1(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X, const arma::mat& X1, const arma::mat& GX1, const arma::mat& X2, const int& Kx, const int& Kx1, const int& Kx2, const int& M, const arma::vec& Ncum, const bool FE, const int& S);
RcppExport SEXP _PartialNetwork2_efcpal1_1(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP XSEXP, SEXP X1SEXP, SEXP GX1SEXP, SEXP X2SEXP, SEXP KxSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX1(GX1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(efcpal1_1(alpha, R, distr, Ilist, y, X, X1, GX1, X2, Kx, Kx1, Kx2, M, Ncum, FE, S));
    return rcpp_result_gen;
END_RCPP
}
// fcpal1_0
double fcpal1_0(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X, const int& Kx, const int& M, const arma::vec& Ncum, const bool FE, const int& S);
RcppExport SEXP _PartialNetwork2_fcpal1_0(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP XSEXP, SEXP KxSEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(fcpal1_0(alpha, R, distr, Ilist, y, X, Kx, M, Ncum, FE, S));
    return rcpp_result_gen;
END_RCPP
}
// efcpal1_0
List efcpal1_0(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X, const int& Kx, const int& M, const arma::vec& Ncum, const bool FE, const int& S);
RcppExport SEXP _PartialNetwork2_efcpal1_0(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP XSEXP, SEXP KxSEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(efcpal1_0(alpha, R, distr, Ilist, y, X, Kx, M, Ncum, FE, S));
    return rcpp_result_gen;
END_RCPP
}
// fcpal2_1
double fcpal2_1(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::vec& Gy, const arma::mat& X, const arma::mat& X1, const arma::mat& GX1, const arma::mat& X2, const int& Kx, const int& Kx1, const int& Kx2, const int& M, const arma::vec& Ncum, const bool FE, const int& S);
RcppExport SEXP _PartialNetwork2_fcpal2_1(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP GySEXP, SEXP XSEXP, SEXP X1SEXP, SEXP GX1SEXP, SEXP X2SEXP, SEXP KxSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX1(GX1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(fcpal2_1(alpha, R, distr, Ilist, y, Gy, X, X1, GX1, X2, Kx, Kx1, Kx2, M, Ncum, FE, S));
    return rcpp_result_gen;
END_RCPP
}
// efcpal2_1
List efcpal2_1(const double& alpha, const int& R, List& distr, List& Ilist, const arma::vec& y, const arma::vec& Gy, const arma::mat& X, const arma::mat& X1, const arma::mat& GX1, const arma::mat& X2, const int& Kx, const int& Kx1, const int& Kx2, const int& M, const arma::vec& Ncum, const bool FE, const int& S);
RcppExport SEXP _PartialNetwork2_efcpal2_1(SEXP alphaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP GySEXP, SEXP XSEXP, SEXP X1SEXP, SEXP GX1SEXP, SEXP X2SEXP, SEXP KxSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NcumSEXP, SEXP FESEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX1(GX1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    Rcpp::traits::input_parameter< const bool >::type FE(FESEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(efcpal2_1(alpha, R, distr, Ilist, y, Gy, X, X1, GX1, X2, Kx, Kx1, Kx2, M, Ncum, FE, S));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PartialNetwork2_fGm", (DL_FUNC) &_PartialNetwork2_fGm, 2},
    {"_PartialNetwork2_fcpal0_1", (DL_FUNC) &_PartialNetwork2_fcpal0_1, 14},
    {"_PartialNetwork2_efcpal0_1", (DL_FUNC) &_PartialNetwork2_efcpal0_1, 14},
    {"_PartialNetwork2_fcpal0_0", (DL_FUNC) &_PartialNetwork2_fcpal0_0, 11},
    {"_PartialNetwork2_efcpal0_0", (DL_FUNC) &_PartialNetwork2_efcpal0_0, 11},
    {"_PartialNetwork2_fcpal1_1", (DL_FUNC) &_PartialNetwork2_fcpal1_1, 16},
    {"_PartialNetwork2_efcpal1_1", (DL_FUNC) &_PartialNetwork2_efcpal1_1, 16},
    {"_PartialNetwork2_fcpal1_0", (DL_FUNC) &_PartialNetwork2_fcpal1_0, 11},
    {"_PartialNetwork2_efcpal1_0", (DL_FUNC) &_PartialNetwork2_efcpal1_0, 11},
    {"_PartialNetwork2_fcpal2_1", (DL_FUNC) &_PartialNetwork2_fcpal2_1, 17},
    {"_PartialNetwork2_efcpal2_1", (DL_FUNC) &_PartialNetwork2_efcpal2_1, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_PartialNetwork2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
